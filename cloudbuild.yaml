## Gera a imagem docker da app1 utilizando o Dockerfile 
## Algumas regioes podem dar erro com o repositorio de imagens, se isso ocorrer troque-o
## Atencao para a regiao onde o trigger será criado tente colocar todos na mesma regiao
 
steps:
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$_PROJECT_ID/gke-repo/quickstart-image', './app1' ]
  id: 'Build Docker Image'

## Empurra a image gerada para o repositorio 
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$_PROJECT_ID/gke-repo/quickstart-image' ]
  id: 'Push Docker Image'

## 1 - pipeline.yaml cria a pipeline que define o nome dela e em qual ambiente executar dev prod ou hml
## 2 - prod.yaml é o apontamento  em qual ambiente ou recurso  será executado no caso em um cluster kubernetes
## 3 - release é a aplicação direta da aplicação ou imagem docker aplicada no ambiente 
## Cria a pipeline dentro do diretorio deploy linha 20
## Define qual deployment executar na linha 22 nesse caso prod onde tem todos os parametros definidos tal qual a localização do cluster
## Pra cada ambiente é necessário especificar o cluster gke sera aplicado
## Importante a conta de servico usada para a trigger no cloudbuild deve ser a de compute@developer do seu projeto
## As linhas 32 e 33 devem ser obrigatorias
## No arquivo pipeline.yaml as tags devem ser unicas para cada ambiente ou seja, se tiver um ambiente prod apenas tageie para prod e nunca prod e dev, pois ele irá tentar 
# fazer nos dois ambiente de acordo com as tags


- name: 'google/cloud-sdk:latest'
  entrypoint: 'sh'
  args:
  - -xe
  - -c
  - |
    gcloud deploy apply --file deploy/pipeline.yaml --region=_REGION
    gcloud deploy apply --file deploy/prod.yaml --region=_REGION
    gcloud deploy releases create 'app-release-${SHORT_SHA}' --delivery-pipeline=gke-cicd-pipeline --region=_REGION --from-k8s-manifest=./kubernetes/app1.yaml


substitutions:
  _PROJECT_ID : long-arcadia-413520
  _REGION : long-arcadia-413520

options:
  logging: CLOUD_LOGGING_ONLY
  

